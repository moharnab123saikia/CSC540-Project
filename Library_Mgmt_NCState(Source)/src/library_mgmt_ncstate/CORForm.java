/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library_mgmt_ncstate;

import java.sql.*;
import javax.swing.DefaultListModel;
import java.util.*;


/**
 *
 * @author Mukka
 */
public class CORForm extends javax.swing.JFrame {

    /**
     * Creates new form CORForm
     */
    
    static final String jdbcURL = "jdbc:oracle:thin:@ora.csc.ncsu.edu:1521:orcl";
    static Connection conn = null;
    static Statement stmt = null;
    //static ResultSet rs = null;
    static String patronid;
    
    public CORForm(String id) {
        patronid = id;
        initComponents();
        initialize();
        load_cor_list();
    }
    /*public CORForm(String p_id)
    {
        initComponents();
        initialize();
        load_cor_list(p_id);
    }*/

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jButton1.setText("Renew");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Close");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(242, 242, 242)
                                .addComponent(jButton1)))
                        .addGap(0, 11, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2))
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
        //DefaultListModel modeldetail = new DefaultListModel();
        String selected = (String) jList1.getSelectedValue();
        String arr[] = selected.split(":");
        int r_id = Integer.parseInt(arr[0]);
        String res_id = "";
        String res_type = "";
        String checkout = "";
        String due = "";
        
        String query = "SELECT resc_id, resc_type, to_char(checkout_date, 'MM/DD/YYYY HH:MM AM'), to_char(due_date, 'MM/DD/YYYY HH:MM AM') FROM Reservation WHERE res_id = "+r_id;
        //System.out.println("1 -> "+query);
        ResultSet rs = null;
        try
        {
        rs = stmt.executeQuery(query);
        while(rs.next())
        {
            res_id = rs.getString("resc_id");
            res_type = rs.getString("resc_type");
            checkout = rs.getString(3);
            due = rs.getString(4);
        }
        
        String display = "";
        
        Statement stmt2 = conn.createStatement();
        ResultSet rs2;
        String res_query;
        switch(res_type)
        {
            case "Book":
                res_query = "SELECT DISTINCT B.isbn, B.title, B.author_name, B.edition, B.publisher, B.year_of_pub FROM Book B, BookList BL, Reservation R WHERE BL.book_id = '"+res_id+"' and BL.isbn = B.isbn";
                //System.out.println("2 -> "+res_query);
                rs2 = stmt2.executeQuery(res_query);
                while(rs2.next())
                {
                    //System.out.println("display -> "+rs2.getString("title"));
                    display = "ISBN: " + rs2.getString(1) + "\n";
                    display = display + "Title: " + rs2.getString(2) + "\n";
                    display = display + "Edition: " + Integer.toString(rs2.getInt(4)) + "\n";
                    display = display + "Author: " + rs2.getString(3) + "\n";
                    display = display + "Publisher: " + rs2.getString(5) + "\n";
                    display = display + "Year of Publication: " + Integer.toString(rs2.getInt(6)) + "\n";
                    display = display + "Checked Out Date: " + checkout + "\n";
                    display = display + "Due Date: " + due + "\n";
                }
                break;
                
            case "Journal":
                res_query = "SELECT DISTINCT J.issn, J.title, J.author_name, J.publ_year FROM Journal J, JournalList JL, Reservation R WHERE JL.journal_id = '"+res_id+"' and JL.issn = J.issn";
                //System.out.println("2 -> "+res_query);
                rs2 = stmt2.executeQuery(res_query);
                while(rs2.next())
                {
                    display = "ISSN: " + rs2.getString(1) + "\n";
                    display = display + "Title: " + rs2.getString(2) + "\n";
                    display = display + "Author: " + rs2.getString(3) + "\n";
                    display = display + "Year of Publication: " + Integer.toString(rs2.getInt(4)) + "\n";
                    display = display + "Checked Out Date: " + checkout + "\n";
                    display = display + "Due Date: " + due + "\n";
                }
                break;
                
            case "Conf":
                res_query = "SELECT DISTINCT C.conf_num, C.name_of_conf, C.author_name, C.title, C.publ_year FROM Conf C, CPList CL, Reservation R WHERE CL.paper_id = '"+res_id+"' and CL.conf_num = C.conf_num";
                //System.out.println("2 -> "+res_query);
                rs2 = stmt2.executeQuery(res_query);
                while(rs2.next())
                {
                    display = "Conference Number: " + rs2.getString(1) + "\n";
                    display = display + "Conference Name: " + rs2.getString(2) + "\n";
                    display = display + "Author: " + rs2.getString(3) + "\n";
                    display = display + "Title: " + rs2.getString(4) + "\n";
                    display = display + "Year of Publication: " + Integer.toString(rs2.getInt(5)) + "\n";
                    display = display + "Checked Out Date: " + checkout + "\n";
                    display = display + "Due Date: " + due + "\n";
                }
                break;
                
            case "Room":
                res_query = "SELECT DISTINCT R.room_no, R.room_type, R.floorno, R.capacity, L.lib_name FROM Room R, Reservation RS, Library L WHERE R.room_no = '"+res_id+"' and R.lib_no = L.lib_no";
		//System.out.println("2 -> "+res_query);
		rs2 = stmt2.executeQuery(res_query);
                while(rs2.next())
                {
                    display = "Room Number: " + rs2.getString(1) + "\n";
                    display = display + "Room Type: " + rs2.getString(2) + "\n";
                    display = display + "Floor: " + Integer.toString(rs2.getInt(3)) + "\n";
                    display = display + "Capacity: " + Integer.toString(rs2.getInt(4)) + "\n";
                    display = display + "Library: " + rs2.getString(5) + "\n";
                    display = display + "Booked From: " + checkout + "\n";
                    display = display + "Booked To: " + due + "\n";
		}
                break;
                
            case "Camera":
                res_query = "SELECT DISTINCT C.make AS make, C.model, C.lens, C.memory_avail, L.lib_name FROM Camera C, Reservation R, Library L WHERE C.camera_id = '"+res_id+"' and C.lib_no = L.lib_no";
                //System.out.println("2 -> "+res_query);
                rs2 = stmt2.executeQuery(res_query);
                while(rs2.next())
                {
                    display = "Make: " + rs2.getString(1) + "\n";
                    display = display + "Model: " + rs2.getString(2) + "\n";
                    display = display + "Lens: " + rs2.getString(3) + "\n";
                    display = display + "Memory Available: " + rs2.getString(4) + "\n";
                    display = display + "Library: " + rs2.getString(5) + "\n";
                    display = display + "Booked From: " + checkout + "\n";
                    display = display + "Booked To: " + due + "\n";
                }
                break;
            
            default:
                break;
        }
        
        
        //modeldetail.addElement(r_id);
        jTextArea1.setText(display);
        
        }
        catch(Throwable oops){
                        oops.printStackTrace();
                        }
        finally {
                close(rs);
                //close(stmt);
                //close(conn);
            }
        
    }//GEN-LAST:event_jList1MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        
        String selected = (String) jList1.getSelectedValue();
        if(selected.isEmpty() || selected==null)
            jTextArea2.setText("Please select a checked-out resource.");
        else
        {
            String arr[] = selected.split(":");
            int r_id = Integer.parseInt(arr[0].trim());
            String arr2[] = arr[1].split(" - ");
            String r_type = arr2[0].trim();
            //Cameras and Rooms cannot be renewed
            if(r_type.equals("Camera") || r_type.equals("Room"))
                jTextArea2.setText(r_type + " cannot be renewed. Please make a new reservation.");
            else
            {
                ResultSet rs = null;
                ResultSet rs2 = null;
                ResultSet rs3 = null;
                ResultSet rs4 = null;
                
                try {
                
                Statement stmt2 = conn.createStatement();
                Statement stmt3 = conn.createStatement();
                Statement stmt4 = conn.createStatement();
                Statement stmt5 = conn.createStatement();
                Statement stmt6 = conn.createStatement();
                
                String res_id = "";
                //Get the resource id for that reservation to check if anyone is in the queue for it
                String query = "SELECT resc_id FROM Reservation WHERE res_id = "+r_id;
                //System.out.println("1 -> "+query);
                rs = stmt.executeQuery(query);
                while(rs.next())
                    res_id = rs.getString(1);
                                
                int q_count = 0;
                //Check count of people in the queue for that resource
                String count_query = "SELECT COUNT(*) AS Count FROM Resv_publ_q WHERE publ_no = '"+res_id+"'";
                //System.out.println("2 -> "+count_query);
                rs2 = stmt2.executeQuery(count_query);
                
                while(rs2.next())
                    q_count = rs2.getInt(1);
                
                if(q_count>0)
                    jTextArea2.setText("Cannot renew resource as there is someone in the queue for it.");
                else
                {
                    /* ********* Renew code here ********** */
                    //Cannot renew if today's date is passed the due date
                    //String check_query = "SELECT COUNT(*) FROM Reservation WHERE Res_id = "+r_id+" AND TO_CHAR(Due_date,'YYYY/MM/DD') < (SELECT TO_CHAR(Sysdate,'YYYY/MM/DD') FROM Dual)";
                    String check_query = "SELECT COUNT(*) FROM Reservation WHERE Res_id = "+r_id+" AND Due_date < Sysdate";
                    rs3 = stmt3.executeQuery(check_query);
                    int check_count = 0;
                    while(rs3.next())
                    {
                        check_count = rs3.getInt(1);
                    }
                    
                    if(check_count > 0)
                        jTextArea2.setText("Resource cannot be renewed since it passed the due date.");
                    else
                    {
                        //Update old reservation IsActive to 0
                        String old_query = "UPDATE Reservation SET IsActive=0 WHERE Res_id = "+r_id;
                        stmt4.executeUpdate(old_query);
                        
                        //Create new reservation
                        /*String p_type = patronid.substring(0,1);
                        String dur_query = "";
                        String co_date = "";
                        String due_date = "";
                        int dur = 0;
                        
                        if(r_type.equals("Book"))
                        {
                            dur_query = "SELECT Duration_Hrs FROM CheckOut WHERE Resc_type = '"+r_type+"' AND Patron_type = '"+p_type+"' AND Is_blocked = (SELECT IsBlocked FROM BookList WHERE Book_id = '"+res_id+"')";
                            rs4 = stmt5.executeQuery(dur_query);
                            while(rs4.next())
                                dur = rs.getInt(1);
                            
                            //java.util.Date co_date_ = new java.util.Date();
                            //java.util.Date due_date_ = new java.util.Date() + (dur/7);
                            
                        }
                        else
                        {
                            dur_query = "SELECT Duration_Hrs FROM CheckOut WHERE Resc_type = '"+r_type+"' AND Patron_type = '"+p_type+"'";
                            rs4 = stmt5.executeQuery(dur_query);
                            while(rs4.next())
                                dur = rs.getInt(1);
                        }
                        */
                        
                        String new_query = "INSERT INTO Reservation VALUES (RESERVATION_SEQ.NEXTVAL, '"+patronid+"', '"+r_type+"', '"+res_id+"', TO_DATE(TO_CHAR(SYSDATE,'YYYY/MM/DD'),'YYYY/MM/DD'), '', '', 1)";
                        System.out.println(new_query);
                        stmt5.executeUpdate(new_query);
                        jTextArea2.setText("Resource renewed.");
                        
                        load_cor_list();
                    
                    }
                }
                
                }
                catch(Throwable oops){
                        oops.printStackTrace();
                        }
        finally {
                close(rs);
                //close(stmt);
                //close(conn);
            }
            }
        }
        
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2MouseClicked

    /**
     * @param args the command line arguments
     */
    public void initialize()
    {
        try {
            // Load the driver. This creates an instance of the driver
	    // and calls the registerDriver method to make Oracle Thin
	    // driver available to clients.
            Class.forName("oracle.jdbc.driver.OracleDriver");
           
	    String user = "msaikia"; 	// For example, "jsmith"
	    //String user = "ibobra";
            //String passwd = "200109140";	// Your 9 digit student ID number
	    String passwd = "200109120";
                 // Get a connection from the first driver in the
		// DriverManager list that recognizes the URL jdbcURL
            conn = DriverManager.getConnection(jdbcURL, user, passwd);
		// Create a statement object that will be sending your
		// SQL statements to the DBMS
            stmt = conn.createStatement();
            
            //ResultSet rs = null;
                
        }
       
     catch(Throwable oops) {
            oops.printStackTrace();
        }
         finally {
                //close(rs);
                //close(stmt);
                //close(conn);
            }
    }
    
    //public void load_cor_list(String p_id)
    public void load_cor_list()
    {
        DefaultListModel modelcor = new DefaultListModel();
        ResultSet rs = null;
        try
        {
            String query = "SELECT res_id, resc_id, resc_type, checkout_date, due_date FROM Reservation WHERE patron_id = '"+patronid+"' AND isactive = 1 order by resc_type";// AND isactive = 1";
            //String query = "SELECT res_id FROM Reservation WHERE patron_id = '"+patronid+"'";// AND isactive = 1";
            //System.out.println("1 -> "+query);
            rs = stmt.executeQuery(query);
            while(rs.next())
            {
                //modelcor.addElement(rs.getInt("res_id"));
            //}
            //while(rs.next())
            //{
                //System.out.println("Start of while");
                int res_id = rs.getInt("res_id");
                String r_id = rs.getString("resc_id");
                String r_type = rs.getString("resc_type");
                //System.out.println(r_id + " " + r_type);
                String display = Integer.toString(res_id) + ": " + r_type + " - ";
                //System.out.println(display);
                ResultSet rs2 = null;
                Statement stmt2 = conn.createStatement();
                String res_query;
                switch(r_type)
                {
                    case "Book":
                        res_query = "SELECT DISTINCT B.title AS title FROM Book B, BookList BL, Reservation R WHERE BL.book_id = '"+r_id+"' and BL.isbn = B.isbn";
                        //System.out.println("2 -> "+res_query);
                        rs2 = stmt2.executeQuery(res_query);
                        while(rs2.next())
                        {
                            //System.out.println("display -> "+rs2.getString("title"));
                            display = display + rs2.getString("title");
                        }
                        break;
                    
                    case "Journal":
                        res_query = "SELECT DISTINCT J.title AS title FROM Journal J, JournalList JL, Reservation R WHERE JL.journal_id = '"+r_id+"' and JL.issn = J.issn";
                        //System.out.println("2 -> "+res_query);
                        rs2 = stmt2.executeQuery(res_query);
                        while(rs2.next())
                        {
                            display = display + rs2.getString("title");
                        }
                        break;
                        
                    case "Conf":
                        res_query = "SELECT DISTINCT C.title AS title FROM Conf C, CPList CL, Reservation R WHERE CL.paper_id = '"+r_id+"' and CL.conf_num = C.conf_num";
                        //System.out.println("2 -> "+res_query);
                        rs2 = stmt2.executeQuery(res_query);
                        while(rs2.next())
                        {
                            display = display + rs2.getString("title");
                        }
                        break;
                        
                    case "Room":
                        display = display + r_id;
                        break;
                        
                    case "Camera":
                        res_query = "SELECT DISTINCT C.make AS make, C.model AS model FROM Camera C, Reservation R WHERE C.camera_id = '"+r_id+"'";
                        //System.out.println("2 -> "+res_query);
                        rs2 = stmt2.executeQuery(res_query);
                        while(rs2.next())
                        {
                            display = display + rs2.getString("make") + " " + rs2.getString("model");
                        }
                        break;
                        
                    default:
                        display = "";
                        
                }
                
                //Adding display to list
                modelcor.addElement(display);
                //System.out.println("Element added");
                
                //System.out.println("End of while");
                
            }
            jList1.setModel(modelcor);
            //System.out.println("Added to list");
        }
        catch(Throwable oops){
                        oops.printStackTrace();
                        }
        finally {
                close(rs);
                //close(stmt);
                //close(conn);
            }
    }
    
    static void close(Connection conn) {
        if(conn != null) {
            try { conn.close(); }
            catch(Throwable oops) 
            {
                oops.printStackTrace();
            }
        }
    }

    static void close(Statement st) {
        if(st != null) {
            try { st.close(); } catch(Throwable oops) {oops.printStackTrace();}
        }
    }

    static void close(ResultSet rs) {
        if(rs != null) {
            try { rs.close(); } catch(Throwable oops) {oops.printStackTrace();}
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CORForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CORForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CORForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CORForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CORForm(patronid).setVisible(true);
            }
        });
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}

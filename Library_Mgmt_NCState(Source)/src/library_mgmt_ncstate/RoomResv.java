package library_mgmt_ncstate;


//import static LoginFrame.rs;
import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import java.sql.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * @author Neha Kale
 */
public class RoomResv extends javax.swing.JFrame {

  static final String jdbcURL 
	= "jdbc:oracle:thin:@ora.csc.ncsu.edu:1521:orcl";
    static Connection conn = null;
    static Statement stmt = null;
    static Statement stmt1 = null;
    static ResultSet rs = null; 
    static String patron_id;
    /**
     * Creates new form RoomResv
     */
   //int rooms_sel_flag=0;
 public RoomResv(String id) {
     patron_id = id;
        initComponents();
        try {
            // Load the driver. This creates an instance of the driver
	    // and calls the registerDriver method to make Oracle Thin
	    // driver available to clients.
            Class.forName("oracle.jdbc.driver.OracleDriver");
            
	    String user = "msaikia";	// For example, "jsmith"
	    String passwd = "200109120";	// Your 9 digit student ID number

		// Get a connection from the first driver in the
		// DriverManager list that recognizes the URL jdbcURL

		conn = DriverManager.getConnection(jdbcURL, user, passwd);

		// Create a statement object that will be sending your
		// SQL statements to the DBMS

		stmt = conn.createStatement();
 		}
         catch(Throwable oops) {
            oops.printStackTrace();
            }
       
               finally {
                close(rs);
                //close(stmt);
                //close(conn);
            }
       
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox_study = new javax.swing.JCheckBox();
        jCheckBox_conf = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList_room = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jCheckBox_hunt = new javax.swing.JCheckBox();
        jCheckBox_hill = new javax.swing.JCheckBox();
        jComboBox_start = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox_end = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList_details = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList_booked = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jButton_slots = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_avail_slots = new javax.swing.JList();
        jButton4 = new javax.swing.JButton();
        jComboBox_size = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Libraries");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Room Type");

        jCheckBox_study.setText("Study Room");
        jCheckBox_study.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_studyActionPerformed(evt);
            }
        });

        jCheckBox_conf.setText("Conference Room");

        jScrollPane1.setViewportView(jList_room);

        jButton1.setText("SEARCH ROOMS");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("RESERVE A ROOM");

        jCheckBox_hunt.setText("James B. Hunt");

        jCheckBox_hill.setText("D.H.Hill");

        jComboBox_start.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "12:00:00 AM", "12:30:00 AM", "01:00:00 AM", "01:30:00 AM", "02:00:00 AM", "02:30:00 AM", "03:00:00 AM", "03:30:00 AM", "04:00:00 AM", "04:30:00 AM", "05:00:00 AM", "05:30:00 AM", "06:00:00 AM", "06:30:00 AM", "07:00:00 AM", "07:30:00 AM", "08:00:00 AM", "08:30:00 AM", "09:00:00 AM", "09:30:00 AM", "10:00:00 AM", "10:30:00 AM", "11:00:00 AM", "11:30:00 AM", "12:00:00 PM", "12:30:00 PM", "01:00:00 PM", "01:30:00 PM", "02:00:00 PM", "02:30:00 PM", "03:00:00 PM", "03:30:00 PM", "04:00:00 PM", "04:30:00 PM", "05:00:00 PM", "05:30:00 PM", "06:00:00 PM", "06:30:00 PM", "07:00:00 PM", "07:30:00 PM", "08:00:00 PM", "08:30:00 PM", "09:00:00 PM", "09:30:00 PM", "10:00:00 PM", "10:30:00 PM", "11:00:00 PM", "11:30:00 PM", " " }));
        jComboBox_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_startActionPerformed(evt);
            }
        });

        jLabel4.setText("Select Date");

        jLabel5.setText("Start Time");

        jComboBox_end.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "12:00:00 AM", "12:30:00 AM", "01:00:00 AM", "01:30:00 AM", "02:00:00 AM", "02:30:00 AM", "03:00:00 AM", "03:30:00 AM", "04:00:00 AM", "04:30:00 AM", "05:00:00 AM", "05:30:00 AM", "06:00:00 AM", "06:30:00 AM", "07:00:00 AM", "07:30:00 AM", "08:00:00 AM", "08:30:00 AM", "09:00:00 AM", "09:30:00 AM", "10:00:00 AM", "10:30:00 AM", "11:00:00 AM", "11:30:00 AM", "12:00:00 PM", "12:30:00 PM", "01:00:00 PM", "01:30:00 PM", "02:00:00 PM", "02:30:00 PM", "03:00:00 PM", "03:30:00 PM", "04:00:00 PM", "04:30:00 PM", "05:00:00 PM", "05:30:00 PM", "06:00:00 PM", "06:30:00 PM", "07:00:00 PM", "07:30:00 PM", "08:00:00 PM", "08:30:00 PM", "09:00:00 PM", "09:30:00 PM", "10:00:00 PM", "10:30:00 PM", "11:00:00 PM", "11:30:00 PM", " " }));
        jComboBox_end.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_endActionPerformed(evt);
            }
        });

        jLabel6.setText("End Time");

        jButton2.setText("SHOW DETAILS");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jList_details);

        jLabel7.setText("ROOM  DETAILS");

        jButton3.setText("RESERVE");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(jList_booked);

        jLabel8.setText("AVAILABLE ROOMS");

        jXDatePicker1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePicker1ActionPerformed(evt);
            }
        });

        jButton_slots.setText("BOOKED SLOTS");
        jButton_slots.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_slotsMouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(jList_avail_slots);

        jButton4.setText("Close");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jComboBox_size.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4" }));

        jLabel9.setText("ROOM CAPACITY");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jButton_slots, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(139, 139, 139))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(322, 322, 322)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox_hill)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jComboBox_size, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBox_hunt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBox_conf)
                                    .addComponent(jCheckBox_study)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(47, 47, 47)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(65, 65, 65)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton2))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox_start, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_end, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(53, 53, 53))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBox_hunt)
                                    .addComponent(jCheckBox_study))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBox_hill)
                                    .addComponent(jCheckBox_conf))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBox_size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_start, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox_end, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(305, 305, 305))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(127, 127, 127)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton_slots, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        int lid1=0,rt=0,lid2=0,rts=0,facflag=0;

        String rtype="";
        String rtypes="";
                DefaultListModel roomavail = new DefaultListModel();
       
        if(jCheckBox_hunt.isSelected())
            lid1=1;
        if(jCheckBox_hill.isSelected()) 
            lid2=2;
        
        
        if (jCheckBox_conf.isSelected())
        {
            rt=1;
            rtype="Conference Room";
        }
        
        if(jCheckBox_study.isSelected())
        {
            rtypes="Study Room";
        }
                if(patron_id.substring(0,1).equals("F"))
                    facflag=1;
            
    
       
        roomavail.clear();

        if(lid1==0 && lid2==0)
               JOptionPane.showMessageDialog(null, "No Library Selected");                       
        else if(rt==1 && facflag==0)
                JOptionPane.showMessageDialog(null, "Conference Room available only for Faculty");            
        else if(rt==1 && lid1!=1 )      //check for facflag if true 
                JOptionPane.showMessageDialog(null, "Conference Room available only at James Hunt");            
        //put check for patron reserving conf room;
        else
        {
            try {
//                if(lid1==1)
//                if(rt==1)
String size  =     jComboBox_size.getSelectedItem().toString();
    int no = Integer.parseInt(size);
System.out.println("size : "+no);            
    
                
                rs = stmt.executeQuery("(SELECT * FROM ROOM WHERE lib_no='"+lid1+"' or lib_no='"+lid2+"') INTERSECT (SELECT * FROM ROOM WHERE room_type='"+rtype+"' or room_type='"+rtypes+"') INTERSECT(SELECT * FROM ROOM WHERE capacity="+no+")");                
//                    rs = stmt.executeQuery("(SELECT * FROM ROOM WHERE lib_no='"+lid1+"' or lib_no='"+lid2+"') INTERSECT (SELECT * FROM ROOM WHERE room_type='"+rtype+"' or room_type='"+rtypes+"')");
//                else
//                    rs = stmt.executeQuery("SELECT * FROM ROOM WHERE lib_no='"+lid1+"' or lib_no='"+lid2+"' INTERSECT SELECT * FROM ROOM WHERE room_type='Study room'");
                while(rs.next())
                {
                   String rno = rs.getString("room_no");
                   roomavail.addElement( rno );
                }
             jList_room.setModel(roomavail);
                
            } catch (SQLException ex) {
                Logger.getLogger(RoomResv.class.getName()).log(Level.SEVERE, null, ex);
            }
               finally {
                close(rs);
                //close(stmt);
                //close(conn);
            }

        }
            
            
    }//GEN-LAST:event_jButton1MouseClicked

    private void jComboBox_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_startActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jComboBox_startActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
      try {
           String room_id = (String) jList_room.getSelectedValue();
           
//          JOptionPane.showMessageDialog(null, room_id);
           DefaultListModel roomdetail = new DefaultListModel();
           rs= stmt.executeQuery("SELECT r.room_no, r.room_type,r.floorno,r.capacity,l.lib_name FROM Room r, Library l where l.lib_no = r.lib_no and room_no = '"+room_id+"'");
//           System.out.println("SELECT * FROM Room WHERE room_no = '"+room_id+"'");
//           rs= stmt.executeQuery("SELECT * FROM Room WHERE room_no = '"+room_id+"'");

           roomdetail.clear();
            while(rs.next())
            {            
   //         JOptionPane.showMessageDialog(null,rs.getString("room_no"));
              String room_no = rs.getString("room_no");
              String roomtype = rs.getString("room_type");
              String floorno = rs.getString("floorno");
              String capacity = rs.getString("capacity");
              String library_name = rs.getString("lib_name");
           
              roomdetail.addElement("Room No: " + room_no );
              roomdetail.addElement("Type: " + roomtype );
              roomdetail.addElement("Floor: " + floorno );
              roomdetail.addElement("Capacity: " + capacity );
              roomdetail.addElement("Library name: " + library_name );
            }
            
                jList_details.setModel(roomdetail);
          
          // TODO add your handling code here:
      } 
      catch (SQLException ex) {
          Logger.getLogger(RoomResv.class.getName()).log(Level.SEVERE, null, ex);
      }
      finally {
                close(rs);
                //close(stmt);
                //close(conn);
            }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
      
      try {
          // TODO add your handling code here:
          String room_id = (String) jList_room.getSelectedValue();
          int no_resv=0;
//         DateFormat df = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
//          rs = stmt.executeQuery("SELECT * FROM resv_room");
//          String room_no = rs.getString("room_no");
          String st1= jComboBox_start.getSelectedItem().toString();     //req_start
          String end1=jComboBox_end.getSelectedItem().toString();       //req_end
          String df=jXDatePicker1.getDate().toString().substring(4,10);
          df=df+" "+jXDatePicker1.getDate().toString().substring(24,28);

      //  int con_start = atoi(st1);
        
                Calendar c = Calendar.getInstance();
                DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
                String formatedDate = "2015-01-01";

                DateFormat timeformat =new SimpleDateFormat("hh:mm:ss a");
                DateFormat timeformat2 =new SimpleDateFormat("hh:mm:ss");
        //  SimpleDateFormat displayFormat = new SimpleDateFormat("HH:mm:ss");
          java.util.Date stdate = timeformat.parse(st1); 
           System.out.println("Time: " + timeformat.format(stdate));
          java.util.Date enddate = timeformat.parse(end1); 
         System.out.println("Time: " + timeformat.format(enddate));
//       SimpleDateFormat parseFormat = new SimpleDateFormat("hh:mm a");
//          java.util.Date date1 = timeformat.parse(st1);
     //      String s = displayFormat.format(date1);
      //   java.util.Date stdate = displayFormat.parse(st1);  
     //    System.out.println("a:"+stdate);
    //   System.out.println(timeformat.format(date1) + " = " + displayFormat.format(date1));
        if((enddate.getHours()-stdate.getHours())>3 || (enddate.getHours()-stdate.getHours())<0)
            JOptionPane.showMessageDialog(null, "Cannot reserve more than 3 hours");
        
        else if((enddate.getHours()-stdate.getHours())==3 && (enddate.getMinutes()-stdate.getMinutes())>0)
            JOptionPane.showMessageDialog(null, "Cannot reserve more than 3 hours");
        else
        {    
            try
            {
            java.util.Date date = (java.util.Date)formatter.parse(jXDatePicker1.getDate().toString());
            c.setTime(date);
//            formatedDate = c.get(Calendar.DATE) + "/" + (c.get(Calendar.MONTH) + 1) + "/" +c.get(Calendar.YEAR);  
            formatedDate = c.get(Calendar.YEAR) + "-" + (c.get(Calendar.MONTH) + 1) + "-" +c.get(Calendar.DATE);  
            }
            catch (Throwable oops)
            {
                oops.printStackTrace();
            }
            c.setTime(jXDatePicker1.getDate()); 

        //  System.out.println("\n"+formatedDate);
          String table_startdate = formatedDate + " " + st1;
          String table_enddate = formatedDate + " " + end1;
          System.out.println("request for in table will be: " +table_startdate+" "+table_enddate);
          rs=stmt.executeQuery("select * from resv_room where room_no='"+room_id+"'");
//          rs=stmt.executeQuery("select TO_CHAR(start_time,'YYYY/MM/DD HH:MI:SS AM') starttime,"
//                  + "TO_CHAR(end_time,'YYYY/MM/DD HH:MI:SS AM') endtime,"
//                  + "is_active from resv_room where room_no='"+room_id+"'");
        while(rs.next())
        {
           String start_comp = rs.getString("start_time");
           
           String end_comp = rs.getString("end_time");
           Date date_comp = rs.getDate("start_time");
//           String date_comp = rs.getString("start_time");
           int activest = rs.getInt("is_active");
           
           System.out.println("compare:"+date_comp+" "+start_comp.substring(11)+" "+end_comp.substring(11)+" req:"+formatedDate);
    //       DateFormat dateformatcomp = new SimpleDateFormat("YYYY:MM:DD");
           
           if(date_comp.toString().equals(formatedDate))
       //    if(date_comp.equals(formatedDate))
           {
                java.util.Date start_comp_time = timeformat2.parse(start_comp.substring(11,19)); 
                        System.out.println("start compTime: " + timeformat.format(start_comp_time));
                java.util.Date end_comp_time = timeformat2.parse(end_comp.substring(11,19)); 
                        System.out.println("end compTime: " + timeformat.format(end_comp_time));

               if(start_comp_time.before(stdate) && (end_comp_time.before(stdate) || end_comp_time.equals(stdate)))
               {
                   no_resv=0;
               }
               else if((start_comp_time.after(enddate) || start_comp_time.equals(enddate)) && end_comp_time.after(enddate))
               {
                   no_resv=0;
               }
               else if(activest==0)
               {
                   no_resv=0;
                  
               }
               else
               {    
                  no_resv=1;
                  break;
               }
           }
           
        }
        
        if(no_resv==0)              //slot is available
        {
          DefaultListModel roombook = new DefaultListModel();
          roombook.clear();
          //  String df;
          //  df = dateChooserCombo_resv.getSelectedDate().toString();
          //  System.out.println(df);
          
          roombook.addElement( room_id );
          roombook.addElement( jComboBox_start.getSelectedItem() );
          roombook.addElement( jComboBox_end.getSelectedItem() );
          roombook.addElement( df );
          
          
          jList_booked.setModel(roombook);
          
          System.out.println("insert into resv_room values('"+room_id+"','"+patron_id+"',to_date('"+table_startdate+"', 'DD/MM/YYYY HH:MI:SS AM'),to_date('"+table_enddate+"', 'DD/MM/YYYY HH:MI:SS AM'),1)");
          int up = stmt.executeUpdate("insert into resv_room values('"+room_id+"','"+patron_id+"',to_date('"+table_startdate+"', 'YYYY/MM/DD HH:MI:SS AM'),to_date('"+table_enddate+"', 'YYYY/MM/DD HH:MI:SS AM'),1)");
          if(up>0)
          {    
              JOptionPane.showMessageDialog(null, "Room reserved");
              stmt.executeUpdate("commit");
          }   
          else
              JOptionPane.showMessageDialog(null, "Cannot Reserve this room");
  
        } 
        else
           JOptionPane.showMessageDialog(null, "Room already in use"); 
       }
      } catch(Throwable oops)
            {
                oops.printStackTrace();
            } /*(SQLException ex) {
          Logger.getLogger(RoomResv.class.getName()).log(Level.SEVERE, null, ex);
      }*/
            

    }//GEN-LAST:event_jButton3MouseClicked

    private void jComboBox_endActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_endActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_endActionPerformed

    private void jXDatePicker1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePicker1ActionPerformed
                  // TODO add your handling code here:
    }//GEN-LAST:event_jXDatePicker1ActionPerformed

    private void jCheckBox_studyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_studyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox_studyActionPerformed

    private void jButton_slotsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_slotsMouseClicked
      try {
          // TODO add your handling code here:
          String room_id = (String) jList_room.getSelectedValue();
          DefaultListModel slotavail = new DefaultListModel();
          Calendar c = Calendar.getInstance();
          DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
          String formatedDate = "2015-01-01";
//        Time listt = time; 
//        slotavail.addElement("12");
            try
            {
            java.util.Date date = (java.util.Date)formatter.parse(jXDatePicker1.getDate().toString());
            c.setTime(date);
 //           formatedDate = c.get(Calendar.DATE) + "/" + (c.get(Calendar.MONTH) + 1) + "/" +c.get(Calendar.YEAR);  
            formatedDate = c.get(Calendar.YEAR) + "-" + (c.get(Calendar.MONTH) + 1) + "-" +c.get(Calendar.DATE);  
            }
            catch (Throwable oops)
            {
                oops.printStackTrace();
            }
            c.setTime(jXDatePicker1.getDate()); 
          rs=stmt.executeQuery("select * from resv_room where room_no='"+room_id+"'");
        //  Date date_comp = rs.getDate("start_time");
           slotavail.clear();
    
        while(rs.next())
        {
           String start_comp = rs.getString("start_time");
           String end_comp = rs.getString("end_time");
           Date date_comp = rs.getDate("start_time");
           int activest = rs.getInt("is_active");
           DateFormat timeformat =new SimpleDateFormat("hh:mm:ss");
           DateFormat timeformat2 =new SimpleDateFormat("hh:mm:ss a");
                      
           System.out.println("slots: "+date_comp+" "+start_comp.substring(11, 19)+" "+end_comp.substring(11,19)+" req:"+formatedDate);
//           DateFormat dateformatcomp = new SimpleDateFormat("YYYY:MM:DD");
           if(date_comp.toString().equals(formatedDate))
           {
               try { 
                   java.util.Date start_comp_time = timeformat.parse(start_comp.substring(11, 19)); 
                   java.util.Date end_comp_time = timeformat.parse(end_comp.substring(11, 19));
                   if(activest!=0)
                           slotavail.addElement(timeformat2.format(start_comp_time) + " to " + timeformat2.format(end_comp_time));
//                        System.out.println("start compTime: " + timeformat.format(start_comp_time));
//                        System.out.println("end compTime: " + timeformat.format(end_comp_time));
               } catch (ParseException ex) {
                   Logger.getLogger(RoomResv.class.getName()).log(Level.SEVERE, null, ex);
               }
               
           }
        }
                        jList_avail_slots.setModel(slotavail);

      } catch (SQLException ex) {
          Logger.getLogger(RoomResv.class.getName()).log(Level.SEVERE, null, ex);
      }

    }//GEN-LAST:event_jButton_slotsMouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton4MouseClicked

    static void close(Connection conn) {
        if(conn != null) {
            try { conn.close(); }
            catch(Throwable oops) 
            {
                oops.printStackTrace();
            }
        }
    }

    static void close(Statement st) {
        if(st != null) {
            try { st.close(); } catch(Throwable oops) {oops.printStackTrace();}
        }
    }

    static void close(ResultSet rs) {
        if(rs != null) {
            try { rs.close(); } catch(Throwable oops) {oops.printStackTrace();}
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoomResv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoomResv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoomResv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoomResv.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoomResv(patron_id).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton_slots;
    private javax.swing.JCheckBox jCheckBox_conf;
    private javax.swing.JCheckBox jCheckBox_hill;
    private javax.swing.JCheckBox jCheckBox_hunt;
    private javax.swing.JCheckBox jCheckBox_study;
    private javax.swing.JComboBox jComboBox_end;
    private javax.swing.JComboBox jComboBox_size;
    private javax.swing.JComboBox jComboBox_start;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList_avail_slots;
    private javax.swing.JList jList_booked;
    private javax.swing.JList jList_details;
    private javax.swing.JList jList_room;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    // End of variables declaration//GEN-END:variables
}
